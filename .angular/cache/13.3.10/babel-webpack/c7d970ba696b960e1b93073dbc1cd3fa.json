{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst BASE_URL = environment.base_url;\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.httpOptions = {};\n      /**\r\n       *\r\n       * @returns Metodo para consumir el login\r\n       */\n\n      this.login = formData => {\n        const json = {\n          email: formData.User,\n          password: formData.Password\n        };\n        return this.http.post(`${BASE_URL}/login`, json, this.httpOptions).pipe(map(resp => resp));\n      };\n      /**\r\n      * Método de servicio para obtener todos los clientes\r\n      */\n\n\n      this.login2 = () => {\n        return this.http.post(`${BASE_URL}/login`, this.httpOptions).pipe(map(resp => resp));\n      };\n      /**\r\n      * Método de servicio para validar token de seguridad\r\n      */\n\n\n      this.validarToken = () => {\n        const token = localStorage.getItem('token') || '';\n\n        if (token) {\n          return true;\n        } else {\n          return false;\n        }\n      };\n\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}